Introduction to Programming
The Editor is a software program we use to write Code. Our Editor allows us to experiment with Code in the lower window, in the
Interactions Area. For Code that we want to keep , we can put it in the upper window in the Definitions Area. Clicking the "Run" button
causes the computer to re-read everything in the Definitions Area and erase anything that was typed into the Interactions Area.
Data Types
Programming languages involve different data types, such as Numbers, Strings, Booleans, and even Images.
Numbers are values like 1 , 0.4 , 1/3 , and -8261.003 .
Numbers are usually used for quantitative data and other values are usually used as categorical data.
Strings are values like "Emma" , "Rosanna" , "Jen and Ed" , or even "08/28/1980" .
All strings must be surrounded in quotation marks.
Booleans are either true or false .
All values evaluate to themselves. The program 42 will evaluate to 42 , the String "Hello" will evaluate to "Hello" , and the Boolean
false will evaluate to false .
Operators
Operators (like + , - , * , < , etc.) are treated the same way as functions: after all, they have inputs and outputs and obey the same rules!
Applying Functions
Applying functions (and operators!) works much the way it does in math. Every function has a name, takes some inputs, and produces some
output. The function name is written first, followed by a list of arguments .
In math this could look like 𝑓(5) or 𝑔(10, 4).
In WeScheme, these examples would be written as (f 5) and (g 10 4) .
Appling the operator to the inputs 1 and 2 would look like ( 1 2) .
Applying a function to make images would look like (star 50 "solid" "red") .
There are many other functions, for example num-sqr , num-sqrt , triangle , square , string-repeat , etc.
Functions have contracts, which help explain how a function should be used. Every Contract has three parts:
The Name of the function - literally, what it’s called.
The Domain of the function - what types of values the function consumes, and in what order.
The Range of the function - what type of value the function produces.
18Strings and Numbers
Make sure you’ve loaded the WeScheme, clicked “Run”, and are working in the Interactions Area.
Strings
String values are always in quotes.
Try typing your name (in quotes!) .
Try typing a sentence like "I’m excited to learn to code!" (in quotes!) .
Try typing your name with the opening quote, but without the closing quote. Read the error message!
Now try typing your name without any quotes. Read the error message!
1) Explain what you understand about how strings work in this programming language.
​
Numbers
2) Try typing 42 into the Interactions Area and hitting “Enter”.
3) Is 42 the same as "42"? Why or why not? Write your answer below:
4) What is the largest number the editor can handle?
5) Try typing 0.5. Then try typing .5. Then try clicking on the answer. Experiment with other decimals. Explain what you understand about
how decimals work in this programming language.
6) What happens if you try a fraction like 1/3?
​
​
7) Try writing negative integers, fractions and decimals. What do you learn?
19
​Booleans
Boolean-producing expressions are yes-or-no questions and will always evaluate to either true (“yes”) or false (“no”). What will each
of the expressions below evaluate to? Write down your prediction in the blanks provided and then type the code into the Interactions Area to see
what it returns.
Prediction
1) (<= 3 4)
3) (= 3 2)
5) (< 2 4)
7) (>= 5 5)
9) (>= 4 6)
11) (<> 3 3)
13) (<> 4 3)
Result
​​
​​
​​
​​
​​
​​
​​
Prediction
2) (string>? "a" "b")
4) (string<? "a" "b")
6) (string=? "a" "b")
8) (string<>? "a" "a")
10) (string>=? "a" "a")
12) (string<>? "a" "b")
14) (string>=? "a" "b")
Result
​​
​​
​​
​​
​​
​​
​​
15) In your own words, describe what < does.
16) In your own words, describe what >= does.
17) In your own words, describe what <> does.
Prediction:
18) (string=? "a tree" "trees")
Result:
​
19) (string=? "tree" "tree")
​
20) (string-contains? "catnap" "cat")
​
21) (string-contains? "cat" "catnap")
​
22) In your own words, describe what string-contains does. Can you generate another expression using string-contains that
returns true?
23) There are infinite numbers values out there (…​-2,-1,0,-1,2…​) and infinite string values ("a", "aa", "aaa"…​) But how many different Boolean
values are there?
20Applying Functions
Make sure you’ve loaded the WeScheme, clicked “Run”, and are working in the Interactions Area. Type this line of code into the Interactions
Area and hit "Enter":
(triangle 50 "solid" "red")
1) What is the name of this function?
2) What did the expression evaluate to?
​
​
3) How many arguments does triangle expect?
​
4) What data type does the triangle function produce?
​
Catching Bugs
5) (triangle 20 "solid")
triangle: expects 3 arguments, but given 2: 20 solid at: line 1, column 0, in <interactions>
Can you spot the mistake?
​
6) (triangle "solid" "red" 20)
triangle: expects a non-negative number as 1st argument, but given: solid; other arguments were:
red 20 at: line 1, column 0, in <interactions>
Can you spot the mistake?
​
7) (triangle 20 40 "solid" "red")
triangle: expects 3 arguments, but given 4: 20 40 solid red at: line 1, column 0, in
<interactions>
Can you spot the mistake?
​
8) (triangle 20 solid "red")
solid: this variable is not defined at: line 1, column 0, in <interactions>
Can you spot the mistake?
​
9) (triangle 20 "striped" "red")
triangle: expects a style ("solid" / "outline") or an opacity value [0-255]) as 2nd argument,
but given: "striped"; other arguments were: 20 "red" at: line 1, column 0, in <interactions>
Can you spot the mistake?
​
21Practicing Contracts: Domain & Range
Consider the following Contract:
is-beach-weather :: Number, String -> Boolean
Note: The contracts on this page are not defined in Pyret and cannot be tested in the editor.
1) What is the Name of this function?
​
2) How many arguments are in this function’s Domain?
3) What is the Type of this function’s first argument?
​
​
4) What is the Type of this function’s second argument?
5) What is the Range of this function?
​
​
6) Circle the expression below that shows the correct application of this function, based on its Contract.
A. (is-beach-weather 70 90)
B. (is-beach-weather 80 100 "cloudy")
C. (is-beach-weather "sunny" 90)
D. (is-beach-weather 90 "stormy weather")
Consider the following Contract:
cylinder :: Number, Number, String -> Image
7) What is the Name of this function?
​
8) How many arguments are in this function’s Domain?
9) What is the Type of this function’s first argument?
​
​
10) What is the Type of this function’s second argument?
11) What is the Type of this function’s third argument?
12) What is the Range of this function?
​
​
​
13) Circle the expression below that shows the correct application of this function, based on its Contract.
A. (cylinder "red" 10 60)
B. (cylinder 30 "green")
C. (cylinder 10 25 "blue")
D. (cylinder 14 "orange" 25)
22Matching Expressions and Contracts
Match the Contract (left) with the expression described by the function being used (right). Note: The contracts on this page are not defined in
Pyret and cannot be tested in the editor.
Contract
Expression
; make-id :: String, Number -> Image1A(make-id "Savannah" "Lopez" 32)
; make-id :: String, Number, String -> Image2B(make-id "Pilar" 17)
; make-id :: String -> Image3C(make-id "Akemi" 39 "red")
; make-id :: String, String -> Image4D(make-id "Raïssa" "McCracken")
; make-id :: String, String, Number -> Image5E(make-id "von Einsiedel")
Contract
Expression
; is-capital :: String, String -> Boolean6A(show-pop "Juneau" "AK" 31848)
; is-capital :: String, String, String -> Boolean7B(show-pop "San Juan" 395426)
; show-pop :: String, Number -> Image8C(is-capital "Accra" "Ghana")
; show-pop :: String, String, Number -> Image9D(show-pop 3751351 "Oklahoma")
; show-pop :: Number, String -> Number10E(is-capital "Albany" "NY" "USA")
